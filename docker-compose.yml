# Extension fields for reusable configuration
x-common-build-args: &common-build-args
  VITE_API_URL_MENU: ${VITE_API_URL_MENU}
  VITE_API_KEY: ${VITE_API_KEY}
  VITE_SEND_ORDER_URL: ${VITE_SEND_ORDER_URL}
  VITE_SAVE_ORDER_URL: ${VITE_SAVE_ORDER_URL}

x-base-service: &base-service
  build:
    context: .
    dockerfile: Dockerfile
  expose:
    - "80"
  networks:
    - restaurant-network

services:
  # Table instances for Dine-in
  table-1:
    <<: *base-service
    build:
      args:
        <<: *common-build-args
        VITE_APP_MODE: dine-in
        VITE_TABLE_ID: table-1
  
  # ... Repeat for table-2 through table-11 just like table-1 ...
  table-2: {<<: *base-service, build: {args: {<<: *common-build-args, VITE_APP_MODE: dine-in, VITE_TABLE_ID: table-2}}}
  table-3: {<<: *base-service, build: {args: {<<: *common-build-args, VITE_APP_MODE: dine-in, VITE_TABLE_ID: table-3}}}
  table-4: {<<: *base-service, build: {args: {<<: *common-build-args, VITE_APP_MODE: dine-in, VITE_TABLE_ID: table-4}}}
  table-5: {<<: *base-service, build: {args: {<<: *common-build-args, VITE_APP_MODE: dine-in, VITE_TABLE_ID: table-5}}}
  table-6: {<<: *base-service, build: {args: {<<: *common-build-args, VITE_APP_MODE: dine-in, VITE_TABLE_ID: table-6}}}
  table-7: {<<: *base-service, build: {args: {<<: *common-build-args, VITE_APP_MODE: dine-in, VITE_TABLE_ID: table-7}}}
  table-8: {<<: *base-service, build: {args: {<<: *common-build-args, VITE_APP_MODE: dine-in, VITE_TABLE_ID: table-8}}}
  table-9: {<<: *base-service, build: {args: {<<: *common-build-args, VITE_APP_MODE: dine-in, VITE_TABLE_ID: table-9}}}
  table-10: {<<: *base-service, build: {args: {<<: *common-build-args, VITE_APP_MODE: dine-in, VITE_TABLE_ID: table-10}}}
  table-11: {<<: *base-service, build: {args: {<<: *common-build-args, VITE_APP_MODE: dine-in, VITE_TABLE_ID: table-11}}}

  # ADD THIS NEW SERVICE FOR TAKEOUT
  takeout:
    <<: *base-service
    build:
      args:
        <<: *common-build-args
        VITE_APP_MODE: takeout
        VITE_TABLE_ID: takeout

  # Nginx reverse proxy (no changes needed here)
  nginx-proxy:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-load-balancer.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    restart: unless-stopped
    networks:
      - restaurant-network

  # Certbot (no changes needed here)
  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: ["sh", "-c", "trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;"]
    networks:
      - restaurant-network

networks:
  restaurant-network:
    driver: bridge